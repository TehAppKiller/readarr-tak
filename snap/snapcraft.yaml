name: readarr-tak
summary: UnOfficial release of Readarr
description: |
  **Readarr is an ebook and audiobook collection manager for Usenet and BitTorrent users.**
  It can monitor multiple RSS feeds for new books from your favorite authors 
  and will grab, sort, and rename them. Note that only one type 
  of a given book is supported. If you want both an audiobook and ebook 
  of a given book you will need multiple instances.
  
  * The web interface is accessible by default at http://localhost:8787
  * See https://readarr.com for more details.


  **Readarr is currently in beta testing**
  * Service is restarted on any condition.

  **Post install commands required to access media folders and see resources :**

  sudo snap connect readarr-tak:removable-media

  sudo snap connect readarr-tak:mount-observe
  
  **!!! Files can only be written in a directory owned by 'root' !!!**
  **!!! Home base directory content is not readable !!!**
  
  This is due to current behavior and restrictions of snaps by Canonical.\
  Check documentation if you want to setup data in /home directory: https://github.com/TehAppKiller/Snapcraft-common-doc/blob/main/README.md#FAQ
website: https://readarr.com
source-code: https://github.com/TehAppKiller/readarr-tak
issues: https://github.com/TehAppKiller/readarr-tak/issues
contact: mailto:tehappkiller@proton.me
donation: https://whydonate.com/en/fundraising/help-teh-devz
license: MIT
icon: icon.svg
grade: stable
confinement: strict
base: core24
adopt-info: readarr
platforms:
  amd64:
  arm64:
  armhf:

apps:
  readarr:
    command: bin/run-readarr.sh
    daemon: simple
    restart-condition: always
    plugs:
      - mount-observe
      - network
      - network-bind
      - removable-media
      - home # useless for now ; if snaps are allowed to read /home folder one day...

parts:
  lttng-ust: # Avoid Core20 dependency
    source-type: git
    source: https://github.com/lttng/lttng-ust.git
    source-tag: v2.12.10
    source-depth: 1
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=/usr
      - --libdir=/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR
      - --disable-man-pages
      - --disable-examples
    override-build: |
      ./bootstrap
      craftctl default
    build-packages:
      - liburcu-dev
      - libnuma-dev
    prime:
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/liblttng-ust*.so*
      
  readarr:
    after:
      - lttng-ust
    plugin: nil
    source: .
    override-pull: |
      # Architecture
      case "$CRAFT_ARCH_BUILD_FOR" in
        amd64) SRC_ARCH="x64" ;;
        arm64) SRC_ARCH="arm64" ;;
        armhf) SRC_ARCH="arm" ;;
      esac

      # Pull
      rm -rf $CRAFT_PART_SRC/{,.[!.],..?}*
      # Pre-Release version as Beta
      download_url=$(curl -sL https://api.github.com/repos/Readarr/Readarr/releases?per_page=1 | grep "linux-core-$SRC_ARCH\." | sed -nre "s/^.*\"browser_download_url\": \"([^\"]*)\".*/\1/p")
      wget "${download_url}" -O srcfile
      #wget "http://readarr.servarr.com/v1/update/develop/updatefile?os=linux&runtime=netcore&arch=$SRC_ARCH" -O srcfile
      tar xvf srcfile

      craftctl default
    override-build: |
      # Architecture
      case "$CRAFT_ARCH_BUILD_FOR" in
        amd64) SRC_ARCH="x64" ;;
        arm64) SRC_ARCH="arm64" ;;
        armhf) SRC_ARCH="arm" ;;
      esac

      # Get Last Source Tag version and Check Snap (with same Source) version
      # Pre-Release version as Beta
      src_version=$(curl -sL https://api.github.com/repos/Readarr/Readarr/releases?per_page=1 | grep "linux-core-$SRC_ARCH\." | sed -nre "s/^.*\/download\/v([^\/]*)\/.*/\1/p")
      #src_version=$(curl -sL "http://readarr.servarr.com/v1/update/develop/changes?os=linux&runtime=netcore&arch=$SRC_ARCH" | sed -nre "s/^[^0-9]*([0-9\.]*).*/\1/p") # not always updated with release
      echo "Source last tag: ${src_version}"
      snap_last_version=$(curl -sL -H "Snap-Device-Series: 16" "https://api.snapcraft.io/v2/snaps/info/readarr-tak?architecture=${CRAFT_ARCH_BUILD_FOR}&fields=version" | sed -nre "s/^.*\"stable\"\,\"track\"\:\"latest\"\}\,\"version\"\:\"([^\"]*)\".*/\1/p");
      echo "Snap last version: ${snap_last_version}"
      snap_build_with_same_version=$(echo $snap_last_version | sed -nre "s/^($src_version.*).*/\1/p");
      # Same version ?
      if [ -z "$snap_build_with_same_version" ]
      then
        new_snap_version="${src_version}";
      else
        # Get snap build version
        snap_build=$(echo $snap_build_with_same_version | sed -nre 's/^.*-v([0-9]*).*/\1/p');
        # Already a build version ?
        if [ -z "$snap_build" ]
        then
          # init @v2
          new_snap_build="2";
        else
          # increment @v+1
          new_snap_build=$(($snap_build+1));
        fi

        new_snap_version="${src_version}-v${new_snap_build}";
      fi

       craftctl set version=$new_snap_version

      # Build
      INST_DIR="$CRAFT_PART_INSTALL/Readarr"
      mkdir -p "$INST_DIR"
      cp -a Readarr/* $INST_DIR

      craftctl default
    build-packages:
      - curl
      - wget
      - libssl-dev
    prime:
      - Readarr

  local:
    plugin: dump
    source: snap/local
    override-prime: |
      craftctl default
      chmod +rx $CRAFT_PRIME/bin/run-readarr.sh

  deps:
    plugin: nil
    source: .
    stage-packages:
      - liburcu8t64
      - libnuma1
      - sqlite3
      - libicu74
    prime:
      - usr/bin/sqlite*
      - usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/*.so*
